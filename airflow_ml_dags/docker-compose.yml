version: '3.7'
# ====================================== AIRFLOW ENVIRONMENT VARIABLES =======================================
x-environment: &airflow_environment
  - AIRFLOW__CORE__EXECUTOR=LocalExecutor
  - AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=False
  - AIRFLOW__CORE__LOAD_EXAMPLES=False
  - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql://airflow:airflow@postgres:5432/airflow
  - AIRFLOW__CORE__STORE_DAG_CODE=True
  - AIRFLOW__CORE__STORE_SERIALIZED_DAGS=True
  - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
  - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
  - AIRFLOW_VAR_DATA_PATH=${DATA_PATH}
  - AIRFLOW_VAR_NETWORK=${NETWORK_NAME}
  - AIRFLOW_VAR_MODEL_PATH=${MODEL_PATH}


x-airflow-image: &airflow_image apache/airflow:2.3.0-python3.8
# ====================================== /AIRFLOW ENVIRONMENT VARIABLES ======================================
services:
  postgres:
    image: postgres:12-alpine
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    networks:
      - ${NETWORK_NAME}
    ports:
      - "5432:5432"

  init:
    build:
      context: images/airflow-docker
      args:
        AIRFLOW_BASE_IMAGE: *airflow_image
    image: airflow-docker
    networks:
      - ${NETWORK_NAME}
    depends_on:
      - postgres
    environment: *airflow_environment
    entrypoint: /bin/bash
    command: >-
      -c 'airflow db init
      && airflow users create
      --username admin --password admin
      --firstname Anonymous --lastname Admin
      --role Admin --email admin@example.org
      && airflow connections add fs_default --conn-type fs'

  webserver:
    build:
      context: images/airflow-docker
      args:
        AIRFLOW_BASE_IMAGE: *airflow_image
    image: airflow-docker

    restart: always
    depends_on:
      - postgres
    networks:
      - ${NETWORK_NAME}
    ports:
      - "8080:8080"
    volumes:
      - logs:/opt/airflow/logs
    environment: *airflow_environment
    command: webserver

  scheduler:
    build:
      context: images/airflow-docker
      args:
        AIRFLOW_BASE_IMAGE: *airflow_image
    image: airflow-docker
    networks:
      - ${NETWORK_NAME}
    restart: always
    depends_on:
      - postgres
    volumes:
      - logs:/opt/airflow/logs
      - ${DAGS_PATH}:/opt/airflow/dags/
      - ${LOCAL_DATA_PATH}:/opt/airflow/data/
      - /var/run/docker.sock:/var/run/docker.sock
    environment: *airflow_environment
    command: scheduler

  ml_base:
    build:
      context: images/airflow-ml-base
    image: airflow-ml-base
    restart: "no"

  predict:
    build:
      context: images/airflow-predict
    image: airflow-predict
    restart: "no"

  download:
    build:
      context: images/airflow-download
    image: airflow-download
    restart: "no"

  train_model:
    build:
      context: images/airflow-train-model
    image: airflow-train-model
    restart: "no"

  preprocess:
    build:
      context: images/airflow-preprocess
    image: airflow-preprocess
    restart: "no"

  split_data:
    build:
      context: images/airflow-split-data
    image: airflow-split-data
    restart: "no"

  validate:
    build:
      context: images/airflow-validate
    image: airflow-validate
    restart: "no"

volumes:
  logs:

networks:
  airflow-network:
    name: ${NETWORK_NAME}
